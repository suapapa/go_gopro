// live_streaming.proto/Open GoPro, Version 2.0 (C) Copyright 2021 GoPro, Inc. (http://gopro.com/OpenGoPro).

// This copyright was auto-generated on Wed Jul  5 19:32:05 UTC 2023

//
//Defines the structure of protobuf messages for working with Live Streams

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: live_streaming.proto

package open_gopro

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumLens int32

const (
	EnumLens_LENS_WIDE      EnumLens = 0
	EnumLens_LENS_LINEAR    EnumLens = 4
	EnumLens_LENS_SUPERVIEW EnumLens = 3
)

// Enum value maps for EnumLens.
var (
	EnumLens_name = map[int32]string{
		0: "LENS_WIDE",
		4: "LENS_LINEAR",
		3: "LENS_SUPERVIEW",
	}
	EnumLens_value = map[string]int32{
		"LENS_WIDE":      0,
		"LENS_LINEAR":    4,
		"LENS_SUPERVIEW": 3,
	}
)

func (x EnumLens) Enum() *EnumLens {
	p := new(EnumLens)
	*p = x
	return p
}

func (x EnumLens) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumLens) Descriptor() protoreflect.EnumDescriptor {
	return file_live_streaming_proto_enumTypes[0].Descriptor()
}

func (EnumLens) Type() protoreflect.EnumType {
	return &file_live_streaming_proto_enumTypes[0]
}

func (x EnumLens) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnumLens) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnumLens(num)
	return nil
}

// Deprecated: Use EnumLens.Descriptor instead.
func (EnumLens) EnumDescriptor() ([]byte, []int) {
	return file_live_streaming_proto_rawDescGZIP(), []int{0}
}

type EnumLiveStreamError int32

const (
	EnumLiveStreamError_LIVE_STREAM_ERROR_NONE                   EnumLiveStreamError = 0  // No error (success)
	EnumLiveStreamError_LIVE_STREAM_ERROR_NETWORK                EnumLiveStreamError = 1  // General network error during the stream
	EnumLiveStreamError_LIVE_STREAM_ERROR_CREATESTREAM           EnumLiveStreamError = 2  // Startup error: bad URL or valid with live stream server
	EnumLiveStreamError_LIVE_STREAM_ERROR_OUTOFMEMORY            EnumLiveStreamError = 3  // Not enough memory on camera to complete task
	EnumLiveStreamError_LIVE_STREAM_ERROR_INPUTSTREAM            EnumLiveStreamError = 4  // Failed to get stream from low level camera system
	EnumLiveStreamError_LIVE_STREAM_ERROR_INTERNET               EnumLiveStreamError = 5  // No internet access detected on startup of streamer
	EnumLiveStreamError_LIVE_STREAM_ERROR_OSNETWORK              EnumLiveStreamError = 6  // Error occured in linux networking stack. usually means the server closed the connection
	EnumLiveStreamError_LIVE_STREAM_ERROR_SELECTEDNETWORKTIMEOUT EnumLiveStreamError = 7  // Timed out attemping to connect to the wifi network when attemping live stream
	EnumLiveStreamError_LIVE_STREAM_ERROR_SSL_HANDSHAKE          EnumLiveStreamError = 8  // SSL handshake failed (commonly caused due to incorrect time / time zone)
	EnumLiveStreamError_LIVE_STREAM_ERROR_CAMERA_BLOCKED         EnumLiveStreamError = 9  // Low level camera system rejected attempt to start live stream
	EnumLiveStreamError_LIVE_STREAM_ERROR_UNKNOWN                EnumLiveStreamError = 10 // Unknown
	EnumLiveStreamError_LIVE_STREAM_ERROR_SD_CARD_FULL           EnumLiveStreamError = 40 // Can not perform livestream because sd card is full
	EnumLiveStreamError_LIVE_STREAM_ERROR_SD_CARD_REMOVED        EnumLiveStreamError = 41 // Livestream stopped because sd card was removed
)

// Enum value maps for EnumLiveStreamError.
var (
	EnumLiveStreamError_name = map[int32]string{
		0:  "LIVE_STREAM_ERROR_NONE",
		1:  "LIVE_STREAM_ERROR_NETWORK",
		2:  "LIVE_STREAM_ERROR_CREATESTREAM",
		3:  "LIVE_STREAM_ERROR_OUTOFMEMORY",
		4:  "LIVE_STREAM_ERROR_INPUTSTREAM",
		5:  "LIVE_STREAM_ERROR_INTERNET",
		6:  "LIVE_STREAM_ERROR_OSNETWORK",
		7:  "LIVE_STREAM_ERROR_SELECTEDNETWORKTIMEOUT",
		8:  "LIVE_STREAM_ERROR_SSL_HANDSHAKE",
		9:  "LIVE_STREAM_ERROR_CAMERA_BLOCKED",
		10: "LIVE_STREAM_ERROR_UNKNOWN",
		40: "LIVE_STREAM_ERROR_SD_CARD_FULL",
		41: "LIVE_STREAM_ERROR_SD_CARD_REMOVED",
	}
	EnumLiveStreamError_value = map[string]int32{
		"LIVE_STREAM_ERROR_NONE":                   0,
		"LIVE_STREAM_ERROR_NETWORK":                1,
		"LIVE_STREAM_ERROR_CREATESTREAM":           2,
		"LIVE_STREAM_ERROR_OUTOFMEMORY":            3,
		"LIVE_STREAM_ERROR_INPUTSTREAM":            4,
		"LIVE_STREAM_ERROR_INTERNET":               5,
		"LIVE_STREAM_ERROR_OSNETWORK":              6,
		"LIVE_STREAM_ERROR_SELECTEDNETWORKTIMEOUT": 7,
		"LIVE_STREAM_ERROR_SSL_HANDSHAKE":          8,
		"LIVE_STREAM_ERROR_CAMERA_BLOCKED":         9,
		"LIVE_STREAM_ERROR_UNKNOWN":                10,
		"LIVE_STREAM_ERROR_SD_CARD_FULL":           40,
		"LIVE_STREAM_ERROR_SD_CARD_REMOVED":        41,
	}
)

func (x EnumLiveStreamError) Enum() *EnumLiveStreamError {
	p := new(EnumLiveStreamError)
	*p = x
	return p
}

func (x EnumLiveStreamError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumLiveStreamError) Descriptor() protoreflect.EnumDescriptor {
	return file_live_streaming_proto_enumTypes[1].Descriptor()
}

func (EnumLiveStreamError) Type() protoreflect.EnumType {
	return &file_live_streaming_proto_enumTypes[1]
}

func (x EnumLiveStreamError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnumLiveStreamError) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnumLiveStreamError(num)
	return nil
}

// Deprecated: Use EnumLiveStreamError.Descriptor instead.
func (EnumLiveStreamError) EnumDescriptor() ([]byte, []int) {
	return file_live_streaming_proto_rawDescGZIP(), []int{1}
}

type EnumLiveStreamStatus int32

const (
	EnumLiveStreamStatus_LIVE_STREAM_STATE_IDLE   EnumLiveStreamStatus = 0 // Initial status. Livestream has not yet been configured
	EnumLiveStreamStatus_LIVE_STREAM_STATE_CONFIG EnumLiveStreamStatus = 1 // Livestream is being configured
	// Livestream has finished configuration and is ready to start streaming
	EnumLiveStreamStatus_LIVE_STREAM_STATE_READY            EnumLiveStreamStatus = 2
	EnumLiveStreamStatus_LIVE_STREAM_STATE_STREAMING        EnumLiveStreamStatus = 3 // Livestream is actively streaming
	EnumLiveStreamStatus_LIVE_STREAM_STATE_COMPLETE_STAY_ON EnumLiveStreamStatus = 4 // Live stream is exiting. No errors occured.
	EnumLiveStreamStatus_LIVE_STREAM_STATE_FAILED_STAY_ON   EnumLiveStreamStatus = 5 // Live stream is exiting. An error occurred.
	EnumLiveStreamStatus_LIVE_STREAM_STATE_RECONNECTING     EnumLiveStreamStatus = 6 // An error occurred during livestream and stream is attempting to reconnect.
)

// Enum value maps for EnumLiveStreamStatus.
var (
	EnumLiveStreamStatus_name = map[int32]string{
		0: "LIVE_STREAM_STATE_IDLE",
		1: "LIVE_STREAM_STATE_CONFIG",
		2: "LIVE_STREAM_STATE_READY",
		3: "LIVE_STREAM_STATE_STREAMING",
		4: "LIVE_STREAM_STATE_COMPLETE_STAY_ON",
		5: "LIVE_STREAM_STATE_FAILED_STAY_ON",
		6: "LIVE_STREAM_STATE_RECONNECTING",
	}
	EnumLiveStreamStatus_value = map[string]int32{
		"LIVE_STREAM_STATE_IDLE":             0,
		"LIVE_STREAM_STATE_CONFIG":           1,
		"LIVE_STREAM_STATE_READY":            2,
		"LIVE_STREAM_STATE_STREAMING":        3,
		"LIVE_STREAM_STATE_COMPLETE_STAY_ON": 4,
		"LIVE_STREAM_STATE_FAILED_STAY_ON":   5,
		"LIVE_STREAM_STATE_RECONNECTING":     6,
	}
)

func (x EnumLiveStreamStatus) Enum() *EnumLiveStreamStatus {
	p := new(EnumLiveStreamStatus)
	*p = x
	return p
}

func (x EnumLiveStreamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumLiveStreamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_live_streaming_proto_enumTypes[2].Descriptor()
}

func (EnumLiveStreamStatus) Type() protoreflect.EnumType {
	return &file_live_streaming_proto_enumTypes[2]
}

func (x EnumLiveStreamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnumLiveStreamStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnumLiveStreamStatus(num)
	return nil
}

// Deprecated: Use EnumLiveStreamStatus.Descriptor instead.
func (EnumLiveStreamStatus) EnumDescriptor() ([]byte, []int) {
	return file_live_streaming_proto_rawDescGZIP(), []int{2}
}

type EnumRegisterLiveStreamStatus int32

const (
	EnumRegisterLiveStreamStatus_REGISTER_LIVE_STREAM_STATUS_STATUS  EnumRegisterLiveStreamStatus = 1
	EnumRegisterLiveStreamStatus_REGISTER_LIVE_STREAM_STATUS_ERROR   EnumRegisterLiveStreamStatus = 2
	EnumRegisterLiveStreamStatus_REGISTER_LIVE_STREAM_STATUS_MODE    EnumRegisterLiveStreamStatus = 3
	EnumRegisterLiveStreamStatus_REGISTER_LIVE_STREAM_STATUS_BITRATE EnumRegisterLiveStreamStatus = 4
)

// Enum value maps for EnumRegisterLiveStreamStatus.
var (
	EnumRegisterLiveStreamStatus_name = map[int32]string{
		1: "REGISTER_LIVE_STREAM_STATUS_STATUS",
		2: "REGISTER_LIVE_STREAM_STATUS_ERROR",
		3: "REGISTER_LIVE_STREAM_STATUS_MODE",
		4: "REGISTER_LIVE_STREAM_STATUS_BITRATE",
	}
	EnumRegisterLiveStreamStatus_value = map[string]int32{
		"REGISTER_LIVE_STREAM_STATUS_STATUS":  1,
		"REGISTER_LIVE_STREAM_STATUS_ERROR":   2,
		"REGISTER_LIVE_STREAM_STATUS_MODE":    3,
		"REGISTER_LIVE_STREAM_STATUS_BITRATE": 4,
	}
)

func (x EnumRegisterLiveStreamStatus) Enum() *EnumRegisterLiveStreamStatus {
	p := new(EnumRegisterLiveStreamStatus)
	*p = x
	return p
}

func (x EnumRegisterLiveStreamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumRegisterLiveStreamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_live_streaming_proto_enumTypes[3].Descriptor()
}

func (EnumRegisterLiveStreamStatus) Type() protoreflect.EnumType {
	return &file_live_streaming_proto_enumTypes[3]
}

func (x EnumRegisterLiveStreamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnumRegisterLiveStreamStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnumRegisterLiveStreamStatus(num)
	return nil
}

// Deprecated: Use EnumRegisterLiveStreamStatus.Descriptor instead.
func (EnumRegisterLiveStreamStatus) EnumDescriptor() ([]byte, []int) {
	return file_live_streaming_proto_rawDescGZIP(), []int{3}
}

type EnumWindowSize int32

const (
	EnumWindowSize_WINDOW_SIZE_480  EnumWindowSize = 4
	EnumWindowSize_WINDOW_SIZE_720  EnumWindowSize = 7
	EnumWindowSize_WINDOW_SIZE_1080 EnumWindowSize = 12
)

// Enum value maps for EnumWindowSize.
var (
	EnumWindowSize_name = map[int32]string{
		4:  "WINDOW_SIZE_480",
		7:  "WINDOW_SIZE_720",
		12: "WINDOW_SIZE_1080",
	}
	EnumWindowSize_value = map[string]int32{
		"WINDOW_SIZE_480":  4,
		"WINDOW_SIZE_720":  7,
		"WINDOW_SIZE_1080": 12,
	}
)

func (x EnumWindowSize) Enum() *EnumWindowSize {
	p := new(EnumWindowSize)
	*p = x
	return p
}

func (x EnumWindowSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumWindowSize) Descriptor() protoreflect.EnumDescriptor {
	return file_live_streaming_proto_enumTypes[4].Descriptor()
}

func (EnumWindowSize) Type() protoreflect.EnumType {
	return &file_live_streaming_proto_enumTypes[4]
}

func (x EnumWindowSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnumWindowSize) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnumWindowSize(num)
	return nil
}

// Deprecated: Use EnumWindowSize.Descriptor instead.
func (EnumWindowSize) EnumDescriptor() ([]byte, []int) {
	return file_live_streaming_proto_rawDescGZIP(), []int{4}
}

type NotifyLiveStreamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveStreamStatus                   *EnumLiveStreamStatus `protobuf:"varint,1,opt,name=live_stream_status,json=liveStreamStatus,enum=open_gopro.EnumLiveStreamStatus" json:"live_stream_status,omitempty"`                                                       // Live stream status
	LiveStreamError                    *EnumLiveStreamError  `protobuf:"varint,2,opt,name=live_stream_error,json=liveStreamError,enum=open_gopro.EnumLiveStreamError" json:"live_stream_error,omitempty"`                                                           // Live stream error
	LiveStreamEncode                   *bool                 `protobuf:"varint,3,opt,name=live_stream_encode,json=liveStreamEncode" json:"live_stream_encode,omitempty"`                                                                                            // Is live stream encoding?
	LiveStreamBitrate                  *int32                `protobuf:"varint,4,opt,name=live_stream_bitrate,json=liveStreamBitrate" json:"live_stream_bitrate,omitempty"`                                                                                         // Live stream bitrate (Kbps)
	LiveStreamWindowSizeSupportedArray []EnumWindowSize      `protobuf:"varint,5,rep,name=live_stream_window_size_supported_array,json=liveStreamWindowSizeSupportedArray,enum=open_gopro.EnumWindowSize" json:"live_stream_window_size_supported_array,omitempty"` // Live stream resolution capabilities
	LiveStreamEncodeSupported          *bool                 `protobuf:"varint,6,opt,name=live_stream_encode_supported,json=liveStreamEncodeSupported" json:"live_stream_encode_supported,omitempty"`                                                               // Does the camera support encoding while live streaming?
	LiveStreamMaxLensUnsupported       *bool                 `protobuf:"varint,7,opt,name=live_stream_max_lens_unsupported,json=liveStreamMaxLensUnsupported" json:"live_stream_max_lens_unsupported,omitempty"`                                                    // Is the Max Lens feature NOT supported?
	LiveStreamMinimumStreamBitrate     *int32                `protobuf:"varint,8,opt,name=live_stream_minimum_stream_bitrate,json=liveStreamMinimumStreamBitrate" json:"live_stream_minimum_stream_bitrate,omitempty"`                                              // Camera-defined minimum bitrate (static) (Kbps)
	LiveStreamMaximumStreamBitrate     *int32                `protobuf:"varint,9,opt,name=live_stream_maximum_stream_bitrate,json=liveStreamMaximumStreamBitrate" json:"live_stream_maximum_stream_bitrate,omitempty"`                                              // Camera-defined maximum bitrate (static) (Kbps)
	LiveStreamLensSupported            *bool                 `protobuf:"varint,10,opt,name=live_stream_lens_supported,json=liveStreamLensSupported" json:"live_stream_lens_supported,omitempty"`                                                                    // Does camera support setting lens for live streaming?
	LiveStreamLensSupportedArray       []EnumLens            `protobuf:"varint,11,rep,name=live_stream_lens_supported_array,json=liveStreamLensSupportedArray,enum=open_gopro.EnumLens" json:"live_stream_lens_supported_array,omitempty"`                          // Array of supported lenses for live streaming
	Deprecated                         *bool                 `protobuf:"varint,12,opt,name=deprecated" json:"deprecated,omitempty"`                                                                                                                                 // Deprecated
}

func (x *NotifyLiveStreamStatus) Reset() {
	*x = NotifyLiveStreamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_streaming_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyLiveStreamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyLiveStreamStatus) ProtoMessage() {}

func (x *NotifyLiveStreamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_live_streaming_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyLiveStreamStatus.ProtoReflect.Descriptor instead.
func (*NotifyLiveStreamStatus) Descriptor() ([]byte, []int) {
	return file_live_streaming_proto_rawDescGZIP(), []int{0}
}

func (x *NotifyLiveStreamStatus) GetLiveStreamStatus() EnumLiveStreamStatus {
	if x != nil && x.LiveStreamStatus != nil {
		return *x.LiveStreamStatus
	}
	return EnumLiveStreamStatus_LIVE_STREAM_STATE_IDLE
}

func (x *NotifyLiveStreamStatus) GetLiveStreamError() EnumLiveStreamError {
	if x != nil && x.LiveStreamError != nil {
		return *x.LiveStreamError
	}
	return EnumLiveStreamError_LIVE_STREAM_ERROR_NONE
}

func (x *NotifyLiveStreamStatus) GetLiveStreamEncode() bool {
	if x != nil && x.LiveStreamEncode != nil {
		return *x.LiveStreamEncode
	}
	return false
}

func (x *NotifyLiveStreamStatus) GetLiveStreamBitrate() int32 {
	if x != nil && x.LiveStreamBitrate != nil {
		return *x.LiveStreamBitrate
	}
	return 0
}

func (x *NotifyLiveStreamStatus) GetLiveStreamWindowSizeSupportedArray() []EnumWindowSize {
	if x != nil {
		return x.LiveStreamWindowSizeSupportedArray
	}
	return nil
}

func (x *NotifyLiveStreamStatus) GetLiveStreamEncodeSupported() bool {
	if x != nil && x.LiveStreamEncodeSupported != nil {
		return *x.LiveStreamEncodeSupported
	}
	return false
}

func (x *NotifyLiveStreamStatus) GetLiveStreamMaxLensUnsupported() bool {
	if x != nil && x.LiveStreamMaxLensUnsupported != nil {
		return *x.LiveStreamMaxLensUnsupported
	}
	return false
}

func (x *NotifyLiveStreamStatus) GetLiveStreamMinimumStreamBitrate() int32 {
	if x != nil && x.LiveStreamMinimumStreamBitrate != nil {
		return *x.LiveStreamMinimumStreamBitrate
	}
	return 0
}

func (x *NotifyLiveStreamStatus) GetLiveStreamMaximumStreamBitrate() int32 {
	if x != nil && x.LiveStreamMaximumStreamBitrate != nil {
		return *x.LiveStreamMaximumStreamBitrate
	}
	return 0
}

func (x *NotifyLiveStreamStatus) GetLiveStreamLensSupported() bool {
	if x != nil && x.LiveStreamLensSupported != nil {
		return *x.LiveStreamLensSupported
	}
	return false
}

func (x *NotifyLiveStreamStatus) GetLiveStreamLensSupportedArray() []EnumLens {
	if x != nil {
		return x.LiveStreamLensSupportedArray
	}
	return nil
}

func (x *NotifyLiveStreamStatus) GetDeprecated() bool {
	if x != nil && x.Deprecated != nil {
		return *x.Deprecated
	}
	return false
}

type RequestGetLiveStreamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterLiveStreamStatus   []EnumRegisterLiveStreamStatus `protobuf:"varint,1,rep,name=register_live_stream_status,json=registerLiveStreamStatus,enum=open_gopro.EnumRegisterLiveStreamStatus" json:"register_live_stream_status,omitempty"`       // Array of live stream statuses to be notified about
	UnregisterLiveStreamStatus []EnumRegisterLiveStreamStatus `protobuf:"varint,2,rep,name=unregister_live_stream_status,json=unregisterLiveStreamStatus,enum=open_gopro.EnumRegisterLiveStreamStatus" json:"unregister_live_stream_status,omitempty"` // Array of live stream statuses to stop being notified about
}

func (x *RequestGetLiveStreamStatus) Reset() {
	*x = RequestGetLiveStreamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_streaming_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGetLiveStreamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGetLiveStreamStatus) ProtoMessage() {}

func (x *RequestGetLiveStreamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_live_streaming_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGetLiveStreamStatus.ProtoReflect.Descriptor instead.
func (*RequestGetLiveStreamStatus) Descriptor() ([]byte, []int) {
	return file_live_streaming_proto_rawDescGZIP(), []int{1}
}

func (x *RequestGetLiveStreamStatus) GetRegisterLiveStreamStatus() []EnumRegisterLiveStreamStatus {
	if x != nil {
		return x.RegisterLiveStreamStatus
	}
	return nil
}

func (x *RequestGetLiveStreamStatus) GetUnregisterLiveStreamStatus() []EnumRegisterLiveStreamStatus {
	if x != nil {
		return x.UnregisterLiveStreamStatus
	}
	return nil
}

type RequestSetLiveStreamMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url             *string         `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`                                                                 // RTMP(S) URL used for live stream
	Encode          *bool           `protobuf:"varint,2,opt,name=encode" json:"encode,omitempty"`                                                          // Save media to sdcard while streaming?
	WindowSize      *EnumWindowSize `protobuf:"varint,3,opt,name=window_size,json=windowSize,enum=open_gopro.EnumWindowSize" json:"window_size,omitempty"` // Live stream resolution
	Reserved1       *string         `protobuf:"bytes,4,opt,name=reserved1" json:"reserved1,omitempty"`                                                     // Reserved
	Reserved2       *string         `protobuf:"bytes,5,opt,name=reserved2" json:"reserved2,omitempty"`                                                     // Reserved
	Cert            []byte          `protobuf:"bytes,6,opt,name=cert" json:"cert,omitempty"`                                                               // Certificate for servers that require it
	MinimumBitrate  *int32          `protobuf:"varint,7,opt,name=minimum_bitrate,json=minimumBitrate" json:"minimum_bitrate,omitempty"`                    // Minimum desired bitrate (may or may not be honored)
	MaximumBitrate  *int32          `protobuf:"varint,8,opt,name=maximum_bitrate,json=maximumBitrate" json:"maximum_bitrate,omitempty"`                    // Maximum desired bitrate (may or may not be honored)
	StartingBitrate *int32          `protobuf:"varint,9,opt,name=starting_bitrate,json=startingBitrate" json:"starting_bitrate,omitempty"`                 // Starting bitrate
	Lens            *EnumLens       `protobuf:"varint,10,opt,name=lens,enum=open_gopro.EnumLens" json:"lens,omitempty"`                                    // Lens to use for live stream (see
	Reserved3       *int32          `protobuf:"varint,11,opt,name=reserved3" json:"reserved3,omitempty"`                                                   // Reserved
}

func (x *RequestSetLiveStreamMode) Reset() {
	*x = RequestSetLiveStreamMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_streaming_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSetLiveStreamMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSetLiveStreamMode) ProtoMessage() {}

func (x *RequestSetLiveStreamMode) ProtoReflect() protoreflect.Message {
	mi := &file_live_streaming_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSetLiveStreamMode.ProtoReflect.Descriptor instead.
func (*RequestSetLiveStreamMode) Descriptor() ([]byte, []int) {
	return file_live_streaming_proto_rawDescGZIP(), []int{2}
}

func (x *RequestSetLiveStreamMode) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RequestSetLiveStreamMode) GetEncode() bool {
	if x != nil && x.Encode != nil {
		return *x.Encode
	}
	return false
}

func (x *RequestSetLiveStreamMode) GetWindowSize() EnumWindowSize {
	if x != nil && x.WindowSize != nil {
		return *x.WindowSize
	}
	return EnumWindowSize_WINDOW_SIZE_480
}

func (x *RequestSetLiveStreamMode) GetReserved1() string {
	if x != nil && x.Reserved1 != nil {
		return *x.Reserved1
	}
	return ""
}

func (x *RequestSetLiveStreamMode) GetReserved2() string {
	if x != nil && x.Reserved2 != nil {
		return *x.Reserved2
	}
	return ""
}

func (x *RequestSetLiveStreamMode) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *RequestSetLiveStreamMode) GetMinimumBitrate() int32 {
	if x != nil && x.MinimumBitrate != nil {
		return *x.MinimumBitrate
	}
	return 0
}

func (x *RequestSetLiveStreamMode) GetMaximumBitrate() int32 {
	if x != nil && x.MaximumBitrate != nil {
		return *x.MaximumBitrate
	}
	return 0
}

func (x *RequestSetLiveStreamMode) GetStartingBitrate() int32 {
	if x != nil && x.StartingBitrate != nil {
		return *x.StartingBitrate
	}
	return 0
}

func (x *RequestSetLiveStreamMode) GetLens() EnumLens {
	if x != nil && x.Lens != nil {
		return *x.Lens
	}
	return EnumLens_LENS_WIDE
}

func (x *RequestSetLiveStreamMode) GetReserved3() int32 {
	if x != nil && x.Reserved3 != nil {
		return *x.Reserved3
	}
	return 0
}

var File_live_streaming_proto protoreflect.FileDescriptor

var file_live_streaming_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x22, 0xe0, 0x06, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a,
	0x12, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a,
	0x11, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x27, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x22, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65,
	0x6e, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x73, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e,
	0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x4a,
	0x0a, 0x22, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x6e, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x20, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x1c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x6e, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x1b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x18, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6b, 0x0a,
	0x1d, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1a,
	0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x96, 0x03, 0x0a, 0x18, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f,
	0x70, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6c,
	0x65, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4c, 0x65, 0x6e, 0x73, 0x52,
	0x04, 0x6c, 0x65, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x33, 0x2a, 0x3e, 0x0a, 0x08, 0x45, 0x6e, 0x75, 0x6d, 0x4c, 0x65, 0x6e, 0x73, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x4e, 0x53, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x45, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x4c, 0x45, 0x4e, 0x53, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x49, 0x45,
	0x57, 0x10, 0x03, 0x2a, 0xde, 0x03, 0x0a, 0x13, 0x45, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x4c,
	0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x49, 0x56, 0x45, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x49,
	0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4f, 0x55, 0x54, 0x4f, 0x46, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x21, 0x0a,
	0x1d, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x04,
	0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x05,
	0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x53, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10,
	0x06, 0x12, 0x2c, 0x0a, 0x28, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x07, 0x12,
	0x23, 0x0a, 0x1f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41,
	0x4b, 0x45, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x49,
	0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x49, 0x56,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53,
	0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x28, 0x12, 0x25, 0x0a,
	0x21, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x53, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0x29, 0x2a, 0x80, 0x02, 0x0a, 0x14, 0x45, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x16, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x56,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x56, 0x45, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x59, 0x5f, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x24, 0x0a,
	0x20, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x59, 0x5f, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x2a, 0xbc, 0x01, 0x0a, 0x1c, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01,
	0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x56,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x27, 0x0a,
	0x23, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x49, 0x54,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x04, 0x2a, 0x50, 0x0a, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x49, 0x4e, 0x44,
	0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x34, 0x38, 0x30, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x37, 0x32, 0x30,
	0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x5f, 0x31, 0x30, 0x38, 0x30, 0x10, 0x0c, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x61, 0x70, 0x61, 0x70, 0x61, 0x2f, 0x67,
	0x6f, 0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x70,
	0x72, 0x6f,
}

var (
	file_live_streaming_proto_rawDescOnce sync.Once
	file_live_streaming_proto_rawDescData = file_live_streaming_proto_rawDesc
)

func file_live_streaming_proto_rawDescGZIP() []byte {
	file_live_streaming_proto_rawDescOnce.Do(func() {
		file_live_streaming_proto_rawDescData = protoimpl.X.CompressGZIP(file_live_streaming_proto_rawDescData)
	})
	return file_live_streaming_proto_rawDescData
}

var file_live_streaming_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_live_streaming_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_live_streaming_proto_goTypes = []interface{}{
	(EnumLens)(0),                      // 0: open_gopro.EnumLens
	(EnumLiveStreamError)(0),           // 1: open_gopro.EnumLiveStreamError
	(EnumLiveStreamStatus)(0),          // 2: open_gopro.EnumLiveStreamStatus
	(EnumRegisterLiveStreamStatus)(0),  // 3: open_gopro.EnumRegisterLiveStreamStatus
	(EnumWindowSize)(0),                // 4: open_gopro.EnumWindowSize
	(*NotifyLiveStreamStatus)(nil),     // 5: open_gopro.NotifyLiveStreamStatus
	(*RequestGetLiveStreamStatus)(nil), // 6: open_gopro.RequestGetLiveStreamStatus
	(*RequestSetLiveStreamMode)(nil),   // 7: open_gopro.RequestSetLiveStreamMode
}
var file_live_streaming_proto_depIdxs = []int32{
	2, // 0: open_gopro.NotifyLiveStreamStatus.live_stream_status:type_name -> open_gopro.EnumLiveStreamStatus
	1, // 1: open_gopro.NotifyLiveStreamStatus.live_stream_error:type_name -> open_gopro.EnumLiveStreamError
	4, // 2: open_gopro.NotifyLiveStreamStatus.live_stream_window_size_supported_array:type_name -> open_gopro.EnumWindowSize
	0, // 3: open_gopro.NotifyLiveStreamStatus.live_stream_lens_supported_array:type_name -> open_gopro.EnumLens
	3, // 4: open_gopro.RequestGetLiveStreamStatus.register_live_stream_status:type_name -> open_gopro.EnumRegisterLiveStreamStatus
	3, // 5: open_gopro.RequestGetLiveStreamStatus.unregister_live_stream_status:type_name -> open_gopro.EnumRegisterLiveStreamStatus
	4, // 6: open_gopro.RequestSetLiveStreamMode.window_size:type_name -> open_gopro.EnumWindowSize
	0, // 7: open_gopro.RequestSetLiveStreamMode.lens:type_name -> open_gopro.EnumLens
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_live_streaming_proto_init() }
func file_live_streaming_proto_init() {
	if File_live_streaming_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_live_streaming_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyLiveStreamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_streaming_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGetLiveStreamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_streaming_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSetLiveStreamMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_live_streaming_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_live_streaming_proto_goTypes,
		DependencyIndexes: file_live_streaming_proto_depIdxs,
		EnumInfos:         file_live_streaming_proto_enumTypes,
		MessageInfos:      file_live_streaming_proto_msgTypes,
	}.Build()
	File_live_streaming_proto = out.File
	file_live_streaming_proto_rawDesc = nil
	file_live_streaming_proto_goTypes = nil
	file_live_streaming_proto_depIdxs = nil
}
