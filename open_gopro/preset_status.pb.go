// preset_status.proto/Open GoPro, Version 2.0 (C) Copyright 2021 GoPro, Inc. (http://gopro.com/OpenGoPro).

// This copyright was auto-generated on Fri Jun  9 22:49:36 UTC 2023

//
//Defines the structure of protobuf message received from camera containing preset status

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: preset_status.proto

package open_gopro

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumFlatMode int32

const (
	EnumFlatMode_FLAT_MODE_UNKNOWN              EnumFlatMode = -1
	EnumFlatMode_FLAT_MODE_PLAYBACK             EnumFlatMode = 4
	EnumFlatMode_FLAT_MODE_SETUP                EnumFlatMode = 5
	EnumFlatMode_FLAT_MODE_VIDEO                EnumFlatMode = 12
	EnumFlatMode_FLAT_MODE_TIME_LAPSE_VIDEO     EnumFlatMode = 13
	EnumFlatMode_FLAT_MODE_LOOPING              EnumFlatMode = 15
	EnumFlatMode_FLAT_MODE_PHOTO_SINGLE         EnumFlatMode = 16
	EnumFlatMode_FLAT_MODE_PHOTO                EnumFlatMode = 17
	EnumFlatMode_FLAT_MODE_PHOTO_NIGHT          EnumFlatMode = 18
	EnumFlatMode_FLAT_MODE_PHOTO_BURST          EnumFlatMode = 19
	EnumFlatMode_FLAT_MODE_TIME_LAPSE_PHOTO     EnumFlatMode = 20
	EnumFlatMode_FLAT_MODE_NIGHT_LAPSE_PHOTO    EnumFlatMode = 21
	EnumFlatMode_FLAT_MODE_BROADCAST_RECORD     EnumFlatMode = 22
	EnumFlatMode_FLAT_MODE_BROADCAST_BROADCAST  EnumFlatMode = 23
	EnumFlatMode_FLAT_MODE_TIME_WARP_VIDEO      EnumFlatMode = 24
	EnumFlatMode_FLAT_MODE_LIVE_BURST           EnumFlatMode = 25
	EnumFlatMode_FLAT_MODE_NIGHT_LAPSE_VIDEO    EnumFlatMode = 26
	EnumFlatMode_FLAT_MODE_SLOMO                EnumFlatMode = 27
	EnumFlatMode_FLAT_MODE_IDLE                 EnumFlatMode = 28
	EnumFlatMode_FLAT_MODE_VIDEO_STAR_TRAIL     EnumFlatMode = 29
	EnumFlatMode_FLAT_MODE_VIDEO_LIGHT_PAINTING EnumFlatMode = 30
	EnumFlatMode_FLAT_MODE_VIDEO_LIGHT_TRAIL    EnumFlatMode = 31
)

// Enum value maps for EnumFlatMode.
var (
	EnumFlatMode_name = map[int32]string{
		-1: "FLAT_MODE_UNKNOWN",
		4:  "FLAT_MODE_PLAYBACK",
		5:  "FLAT_MODE_SETUP",
		12: "FLAT_MODE_VIDEO",
		13: "FLAT_MODE_TIME_LAPSE_VIDEO",
		15: "FLAT_MODE_LOOPING",
		16: "FLAT_MODE_PHOTO_SINGLE",
		17: "FLAT_MODE_PHOTO",
		18: "FLAT_MODE_PHOTO_NIGHT",
		19: "FLAT_MODE_PHOTO_BURST",
		20: "FLAT_MODE_TIME_LAPSE_PHOTO",
		21: "FLAT_MODE_NIGHT_LAPSE_PHOTO",
		22: "FLAT_MODE_BROADCAST_RECORD",
		23: "FLAT_MODE_BROADCAST_BROADCAST",
		24: "FLAT_MODE_TIME_WARP_VIDEO",
		25: "FLAT_MODE_LIVE_BURST",
		26: "FLAT_MODE_NIGHT_LAPSE_VIDEO",
		27: "FLAT_MODE_SLOMO",
		28: "FLAT_MODE_IDLE",
		29: "FLAT_MODE_VIDEO_STAR_TRAIL",
		30: "FLAT_MODE_VIDEO_LIGHT_PAINTING",
		31: "FLAT_MODE_VIDEO_LIGHT_TRAIL",
	}
	EnumFlatMode_value = map[string]int32{
		"FLAT_MODE_UNKNOWN":              -1,
		"FLAT_MODE_PLAYBACK":             4,
		"FLAT_MODE_SETUP":                5,
		"FLAT_MODE_VIDEO":                12,
		"FLAT_MODE_TIME_LAPSE_VIDEO":     13,
		"FLAT_MODE_LOOPING":              15,
		"FLAT_MODE_PHOTO_SINGLE":         16,
		"FLAT_MODE_PHOTO":                17,
		"FLAT_MODE_PHOTO_NIGHT":          18,
		"FLAT_MODE_PHOTO_BURST":          19,
		"FLAT_MODE_TIME_LAPSE_PHOTO":     20,
		"FLAT_MODE_NIGHT_LAPSE_PHOTO":    21,
		"FLAT_MODE_BROADCAST_RECORD":     22,
		"FLAT_MODE_BROADCAST_BROADCAST":  23,
		"FLAT_MODE_TIME_WARP_VIDEO":      24,
		"FLAT_MODE_LIVE_BURST":           25,
		"FLAT_MODE_NIGHT_LAPSE_VIDEO":    26,
		"FLAT_MODE_SLOMO":                27,
		"FLAT_MODE_IDLE":                 28,
		"FLAT_MODE_VIDEO_STAR_TRAIL":     29,
		"FLAT_MODE_VIDEO_LIGHT_PAINTING": 30,
		"FLAT_MODE_VIDEO_LIGHT_TRAIL":    31,
	}
)

func (x EnumFlatMode) Enum() *EnumFlatMode {
	p := new(EnumFlatMode)
	*p = x
	return p
}

func (x EnumFlatMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumFlatMode) Descriptor() protoreflect.EnumDescriptor {
	return file_preset_status_proto_enumTypes[0].Descriptor()
}

func (EnumFlatMode) Type() protoreflect.EnumType {
	return &file_preset_status_proto_enumTypes[0]
}

func (x EnumFlatMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnumFlatMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnumFlatMode(num)
	return nil
}

// Deprecated: Use EnumFlatMode.Descriptor instead.
func (EnumFlatMode) EnumDescriptor() ([]byte, []int) {
	return file_preset_status_proto_rawDescGZIP(), []int{0}
}

type EnumPresetGroup int32

const (
	EnumPresetGroup_PRESET_GROUP_ID_VIDEO               EnumPresetGroup = 1000
	EnumPresetGroup_PRESET_GROUP_ID_PHOTO               EnumPresetGroup = 1001
	EnumPresetGroup_PRESET_GROUP_ID_TIMELAPSE           EnumPresetGroup = 1002
	EnumPresetGroup_PRESET_GROUP_ID_VIDEO_DUAL_LENS     EnumPresetGroup = 1003
	EnumPresetGroup_PRESET_GROUP_ID_PHOTO_DUAL_LENS     EnumPresetGroup = 1004
	EnumPresetGroup_PRESET_GROUP_ID_TIMELAPSE_DUAL_LENS EnumPresetGroup = 1005
	EnumPresetGroup_PRESET_GROUP_ID_SPECIAL             EnumPresetGroup = 1006
)

// Enum value maps for EnumPresetGroup.
var (
	EnumPresetGroup_name = map[int32]string{
		1000: "PRESET_GROUP_ID_VIDEO",
		1001: "PRESET_GROUP_ID_PHOTO",
		1002: "PRESET_GROUP_ID_TIMELAPSE",
		1003: "PRESET_GROUP_ID_VIDEO_DUAL_LENS",
		1004: "PRESET_GROUP_ID_PHOTO_DUAL_LENS",
		1005: "PRESET_GROUP_ID_TIMELAPSE_DUAL_LENS",
		1006: "PRESET_GROUP_ID_SPECIAL",
	}
	EnumPresetGroup_value = map[string]int32{
		"PRESET_GROUP_ID_VIDEO":               1000,
		"PRESET_GROUP_ID_PHOTO":               1001,
		"PRESET_GROUP_ID_TIMELAPSE":           1002,
		"PRESET_GROUP_ID_VIDEO_DUAL_LENS":     1003,
		"PRESET_GROUP_ID_PHOTO_DUAL_LENS":     1004,
		"PRESET_GROUP_ID_TIMELAPSE_DUAL_LENS": 1005,
		"PRESET_GROUP_ID_SPECIAL":             1006,
	}
)

func (x EnumPresetGroup) Enum() *EnumPresetGroup {
	p := new(EnumPresetGroup)
	*p = x
	return p
}

func (x EnumPresetGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumPresetGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_preset_status_proto_enumTypes[1].Descriptor()
}

func (EnumPresetGroup) Type() protoreflect.EnumType {
	return &file_preset_status_proto_enumTypes[1]
}

func (x EnumPresetGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnumPresetGroup) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnumPresetGroup(num)
	return nil
}

// Deprecated: Use EnumPresetGroup.Descriptor instead.
func (EnumPresetGroup) EnumDescriptor() ([]byte, []int) {
	return file_preset_status_proto_rawDescGZIP(), []int{1}
}

type EnumPresetGroupIcon int32

const (
	EnumPresetGroupIcon_PRESET_GROUP_VIDEO_ICON_ID           EnumPresetGroupIcon = 0
	EnumPresetGroupIcon_PRESET_GROUP_PHOTO_ICON_ID           EnumPresetGroupIcon = 1
	EnumPresetGroupIcon_PRESET_GROUP_TIMELAPSE_ICON_ID       EnumPresetGroupIcon = 2
	EnumPresetGroupIcon_PRESET_GROUP_LONG_BAT_VIDEO_ICON_ID  EnumPresetGroupIcon = 3
	EnumPresetGroupIcon_PRESET_GROUP_ENDURANCE_VIDEO_ICON_ID EnumPresetGroupIcon = 4
	EnumPresetGroupIcon_PRESET_GROUP_MAX_VIDEO_ICON_ID       EnumPresetGroupIcon = 5
	EnumPresetGroupIcon_PRESET_GROUP_MAX_PHOTO_ICON_ID       EnumPresetGroupIcon = 6
	EnumPresetGroupIcon_PRESET_GROUP_MAX_TIMELAPSE_ICON_ID   EnumPresetGroupIcon = 7
)

// Enum value maps for EnumPresetGroupIcon.
var (
	EnumPresetGroupIcon_name = map[int32]string{
		0: "PRESET_GROUP_VIDEO_ICON_ID",
		1: "PRESET_GROUP_PHOTO_ICON_ID",
		2: "PRESET_GROUP_TIMELAPSE_ICON_ID",
		3: "PRESET_GROUP_LONG_BAT_VIDEO_ICON_ID",
		4: "PRESET_GROUP_ENDURANCE_VIDEO_ICON_ID",
		5: "PRESET_GROUP_MAX_VIDEO_ICON_ID",
		6: "PRESET_GROUP_MAX_PHOTO_ICON_ID",
		7: "PRESET_GROUP_MAX_TIMELAPSE_ICON_ID",
	}
	EnumPresetGroupIcon_value = map[string]int32{
		"PRESET_GROUP_VIDEO_ICON_ID":           0,
		"PRESET_GROUP_PHOTO_ICON_ID":           1,
		"PRESET_GROUP_TIMELAPSE_ICON_ID":       2,
		"PRESET_GROUP_LONG_BAT_VIDEO_ICON_ID":  3,
		"PRESET_GROUP_ENDURANCE_VIDEO_ICON_ID": 4,
		"PRESET_GROUP_MAX_VIDEO_ICON_ID":       5,
		"PRESET_GROUP_MAX_PHOTO_ICON_ID":       6,
		"PRESET_GROUP_MAX_TIMELAPSE_ICON_ID":   7,
	}
)

func (x EnumPresetGroupIcon) Enum() *EnumPresetGroupIcon {
	p := new(EnumPresetGroupIcon)
	*p = x
	return p
}

func (x EnumPresetGroupIcon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumPresetGroupIcon) Descriptor() protoreflect.EnumDescriptor {
	return file_preset_status_proto_enumTypes[2].Descriptor()
}

func (EnumPresetGroupIcon) Type() protoreflect.EnumType {
	return &file_preset_status_proto_enumTypes[2]
}

func (x EnumPresetGroupIcon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnumPresetGroupIcon) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnumPresetGroupIcon(num)
	return nil
}

// Deprecated: Use EnumPresetGroupIcon.Descriptor instead.
func (EnumPresetGroupIcon) EnumDescriptor() ([]byte, []int) {
	return file_preset_status_proto_rawDescGZIP(), []int{2}
}

type EnumPresetIcon int32

const (
	EnumPresetIcon_PRESET_ICON_VIDEO       EnumPresetIcon = 0
	EnumPresetIcon_PRESET_ICON_ACTIVITY    EnumPresetIcon = 1
	EnumPresetIcon_PRESET_ICON_CINEMATIC   EnumPresetIcon = 2
	EnumPresetIcon_PRESET_ICON_PHOTO       EnumPresetIcon = 3
	EnumPresetIcon_PRESET_ICON_LIVE_BURST  EnumPresetIcon = 4
	EnumPresetIcon_PRESET_ICON_BURST       EnumPresetIcon = 5
	EnumPresetIcon_PRESET_ICON_PHOTO_NIGHT EnumPresetIcon = 6
	EnumPresetIcon_PRESET_ICON_TIMEWARP    EnumPresetIcon = 7
	EnumPresetIcon_PRESET_ICON_TIMELAPSE   EnumPresetIcon = 8
	EnumPresetIcon_PRESET_ICON_NIGHTLAPSE  EnumPresetIcon = 9
	EnumPresetIcon_PRESET_ICON_SNAIL       EnumPresetIcon = 10
	EnumPresetIcon_PRESET_ICON_VIDEO_2     EnumPresetIcon = 11
	EnumPresetIcon_PRESET_ICON_360_VIDEO   EnumPresetIcon = 12
	EnumPresetIcon_PRESET_ICON_PHOTO_2     EnumPresetIcon = 13
	EnumPresetIcon_PRESET_ICON_PANORAMA    EnumPresetIcon = 14
	EnumPresetIcon_PRESET_ICON_BURST_2     EnumPresetIcon = 15
	EnumPresetIcon_PRESET_ICON_TIMEWARP_2  EnumPresetIcon = 16
	EnumPresetIcon_PRESET_ICON_TIMELAPSE_2 EnumPresetIcon = 17
	EnumPresetIcon_PRESET_ICON_CUSTOM      EnumPresetIcon = 18
	EnumPresetIcon_PRESET_ICON_AIR         EnumPresetIcon = 19
	EnumPresetIcon_PRESET_ICON_BIKE        EnumPresetIcon = 20
	EnumPresetIcon_PRESET_ICON_EPIC        EnumPresetIcon = 21
	EnumPresetIcon_PRESET_ICON_INDOOR      EnumPresetIcon = 22
	EnumPresetIcon_PRESET_ICON_MOTOR       EnumPresetIcon = 23
	EnumPresetIcon_PRESET_ICON_MOUNTED     EnumPresetIcon = 24
	EnumPresetIcon_PRESET_ICON_OUTDOOR     EnumPresetIcon = 25
	EnumPresetIcon_PRESET_ICON_POV         EnumPresetIcon = 26
	EnumPresetIcon_PRESET_ICON_SELFIE      EnumPresetIcon = 27
	EnumPresetIcon_PRESET_ICON_SKATE       EnumPresetIcon = 28
	EnumPresetIcon_PRESET_ICON_SNOW        EnumPresetIcon = 29
	EnumPresetIcon_PRESET_ICON_TRAIL       EnumPresetIcon = 30
	EnumPresetIcon_PRESET_ICON_TRAVEL      EnumPresetIcon = 31
	EnumPresetIcon_PRESET_ICON_WATER       EnumPresetIcon = 32
	EnumPresetIcon_PRESET_ICON_LOOPING     EnumPresetIcon = 33
	// Reserved 34 - 50 for Custom presets
	EnumPresetIcon_PRESET_ICON_MAX_VIDEO           EnumPresetIcon = 55
	EnumPresetIcon_PRESET_ICON_MAX_PHOTO           EnumPresetIcon = 56
	EnumPresetIcon_PRESET_ICON_MAX_TIMEWARP        EnumPresetIcon = 57
	EnumPresetIcon_PRESET_ICON_BASIC               EnumPresetIcon = 58
	EnumPresetIcon_PRESET_ICON_ULTRA_SLO_MO        EnumPresetIcon = 59
	EnumPresetIcon_PRESET_ICON_STANDARD_ENDURANCE  EnumPresetIcon = 60
	EnumPresetIcon_PRESET_ICON_ACTIVITY_ENDURANCE  EnumPresetIcon = 61
	EnumPresetIcon_PRESET_ICON_CINEMATIC_ENDURANCE EnumPresetIcon = 62
	EnumPresetIcon_PRESET_ICON_SLOMO_ENDURANCE     EnumPresetIcon = 63
	EnumPresetIcon_PRESET_ICON_STATIONARY_1        EnumPresetIcon = 64
	EnumPresetIcon_PRESET_ICON_STATIONARY_2        EnumPresetIcon = 65
	EnumPresetIcon_PRESET_ICON_STATIONARY_3        EnumPresetIcon = 66
	EnumPresetIcon_PRESET_ICON_STATIONARY_4        EnumPresetIcon = 67
	EnumPresetIcon_PRESET_ICON_STAR_TRAIL          EnumPresetIcon = 76
	EnumPresetIcon_PRESET_ICON_LIGHT_PAINTING      EnumPresetIcon = 77
	EnumPresetIcon_PRESET_ICON_LIGHT_TRAIL         EnumPresetIcon = 78
	EnumPresetIcon_PRESET_ICON_FULL_FRAME          EnumPresetIcon = 79
	EnumPresetIcon_PRESET_ICON_TIMELAPSE_PHOTO     EnumPresetIcon = 1000
	EnumPresetIcon_PRESET_ICON_NIGHTLAPSE_PHOTO    EnumPresetIcon = 1001
)

// Enum value maps for EnumPresetIcon.
var (
	EnumPresetIcon_name = map[int32]string{
		0:    "PRESET_ICON_VIDEO",
		1:    "PRESET_ICON_ACTIVITY",
		2:    "PRESET_ICON_CINEMATIC",
		3:    "PRESET_ICON_PHOTO",
		4:    "PRESET_ICON_LIVE_BURST",
		5:    "PRESET_ICON_BURST",
		6:    "PRESET_ICON_PHOTO_NIGHT",
		7:    "PRESET_ICON_TIMEWARP",
		8:    "PRESET_ICON_TIMELAPSE",
		9:    "PRESET_ICON_NIGHTLAPSE",
		10:   "PRESET_ICON_SNAIL",
		11:   "PRESET_ICON_VIDEO_2",
		12:   "PRESET_ICON_360_VIDEO",
		13:   "PRESET_ICON_PHOTO_2",
		14:   "PRESET_ICON_PANORAMA",
		15:   "PRESET_ICON_BURST_2",
		16:   "PRESET_ICON_TIMEWARP_2",
		17:   "PRESET_ICON_TIMELAPSE_2",
		18:   "PRESET_ICON_CUSTOM",
		19:   "PRESET_ICON_AIR",
		20:   "PRESET_ICON_BIKE",
		21:   "PRESET_ICON_EPIC",
		22:   "PRESET_ICON_INDOOR",
		23:   "PRESET_ICON_MOTOR",
		24:   "PRESET_ICON_MOUNTED",
		25:   "PRESET_ICON_OUTDOOR",
		26:   "PRESET_ICON_POV",
		27:   "PRESET_ICON_SELFIE",
		28:   "PRESET_ICON_SKATE",
		29:   "PRESET_ICON_SNOW",
		30:   "PRESET_ICON_TRAIL",
		31:   "PRESET_ICON_TRAVEL",
		32:   "PRESET_ICON_WATER",
		33:   "PRESET_ICON_LOOPING",
		55:   "PRESET_ICON_MAX_VIDEO",
		56:   "PRESET_ICON_MAX_PHOTO",
		57:   "PRESET_ICON_MAX_TIMEWARP",
		58:   "PRESET_ICON_BASIC",
		59:   "PRESET_ICON_ULTRA_SLO_MO",
		60:   "PRESET_ICON_STANDARD_ENDURANCE",
		61:   "PRESET_ICON_ACTIVITY_ENDURANCE",
		62:   "PRESET_ICON_CINEMATIC_ENDURANCE",
		63:   "PRESET_ICON_SLOMO_ENDURANCE",
		64:   "PRESET_ICON_STATIONARY_1",
		65:   "PRESET_ICON_STATIONARY_2",
		66:   "PRESET_ICON_STATIONARY_3",
		67:   "PRESET_ICON_STATIONARY_4",
		76:   "PRESET_ICON_STAR_TRAIL",
		77:   "PRESET_ICON_LIGHT_PAINTING",
		78:   "PRESET_ICON_LIGHT_TRAIL",
		79:   "PRESET_ICON_FULL_FRAME",
		1000: "PRESET_ICON_TIMELAPSE_PHOTO",
		1001: "PRESET_ICON_NIGHTLAPSE_PHOTO",
	}
	EnumPresetIcon_value = map[string]int32{
		"PRESET_ICON_VIDEO":               0,
		"PRESET_ICON_ACTIVITY":            1,
		"PRESET_ICON_CINEMATIC":           2,
		"PRESET_ICON_PHOTO":               3,
		"PRESET_ICON_LIVE_BURST":          4,
		"PRESET_ICON_BURST":               5,
		"PRESET_ICON_PHOTO_NIGHT":         6,
		"PRESET_ICON_TIMEWARP":            7,
		"PRESET_ICON_TIMELAPSE":           8,
		"PRESET_ICON_NIGHTLAPSE":          9,
		"PRESET_ICON_SNAIL":               10,
		"PRESET_ICON_VIDEO_2":             11,
		"PRESET_ICON_360_VIDEO":           12,
		"PRESET_ICON_PHOTO_2":             13,
		"PRESET_ICON_PANORAMA":            14,
		"PRESET_ICON_BURST_2":             15,
		"PRESET_ICON_TIMEWARP_2":          16,
		"PRESET_ICON_TIMELAPSE_2":         17,
		"PRESET_ICON_CUSTOM":              18,
		"PRESET_ICON_AIR":                 19,
		"PRESET_ICON_BIKE":                20,
		"PRESET_ICON_EPIC":                21,
		"PRESET_ICON_INDOOR":              22,
		"PRESET_ICON_MOTOR":               23,
		"PRESET_ICON_MOUNTED":             24,
		"PRESET_ICON_OUTDOOR":             25,
		"PRESET_ICON_POV":                 26,
		"PRESET_ICON_SELFIE":              27,
		"PRESET_ICON_SKATE":               28,
		"PRESET_ICON_SNOW":                29,
		"PRESET_ICON_TRAIL":               30,
		"PRESET_ICON_TRAVEL":              31,
		"PRESET_ICON_WATER":               32,
		"PRESET_ICON_LOOPING":             33,
		"PRESET_ICON_MAX_VIDEO":           55,
		"PRESET_ICON_MAX_PHOTO":           56,
		"PRESET_ICON_MAX_TIMEWARP":        57,
		"PRESET_ICON_BASIC":               58,
		"PRESET_ICON_ULTRA_SLO_MO":        59,
		"PRESET_ICON_STANDARD_ENDURANCE":  60,
		"PRESET_ICON_ACTIVITY_ENDURANCE":  61,
		"PRESET_ICON_CINEMATIC_ENDURANCE": 62,
		"PRESET_ICON_SLOMO_ENDURANCE":     63,
		"PRESET_ICON_STATIONARY_1":        64,
		"PRESET_ICON_STATIONARY_2":        65,
		"PRESET_ICON_STATIONARY_3":        66,
		"PRESET_ICON_STATIONARY_4":        67,
		"PRESET_ICON_STAR_TRAIL":          76,
		"PRESET_ICON_LIGHT_PAINTING":      77,
		"PRESET_ICON_LIGHT_TRAIL":         78,
		"PRESET_ICON_FULL_FRAME":          79,
		"PRESET_ICON_TIMELAPSE_PHOTO":     1000,
		"PRESET_ICON_NIGHTLAPSE_PHOTO":    1001,
	}
)

func (x EnumPresetIcon) Enum() *EnumPresetIcon {
	p := new(EnumPresetIcon)
	*p = x
	return p
}

func (x EnumPresetIcon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumPresetIcon) Descriptor() protoreflect.EnumDescriptor {
	return file_preset_status_proto_enumTypes[3].Descriptor()
}

func (EnumPresetIcon) Type() protoreflect.EnumType {
	return &file_preset_status_proto_enumTypes[3]
}

func (x EnumPresetIcon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnumPresetIcon) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnumPresetIcon(num)
	return nil
}

// Deprecated: Use EnumPresetIcon.Descriptor instead.
func (EnumPresetIcon) EnumDescriptor() ([]byte, []int) {
	return file_preset_status_proto_rawDescGZIP(), []int{3}
}

type EnumPresetTitle int32

const (
	EnumPresetTitle_PRESET_TITLE_ACTIVITY      EnumPresetTitle = 0
	EnumPresetTitle_PRESET_TITLE_STANDARD      EnumPresetTitle = 1
	EnumPresetTitle_PRESET_TITLE_CINEMATIC     EnumPresetTitle = 2
	EnumPresetTitle_PRESET_TITLE_PHOTO         EnumPresetTitle = 3
	EnumPresetTitle_PRESET_TITLE_LIVE_BURST    EnumPresetTitle = 4
	EnumPresetTitle_PRESET_TITLE_BURST         EnumPresetTitle = 5
	EnumPresetTitle_PRESET_TITLE_NIGHT         EnumPresetTitle = 6
	EnumPresetTitle_PRESET_TITLE_TIME_WARP     EnumPresetTitle = 7
	EnumPresetTitle_PRESET_TITLE_TIME_LAPSE    EnumPresetTitle = 8
	EnumPresetTitle_PRESET_TITLE_NIGHT_LAPSE   EnumPresetTitle = 9
	EnumPresetTitle_PRESET_TITLE_VIDEO         EnumPresetTitle = 10
	EnumPresetTitle_PRESET_TITLE_SLOMO         EnumPresetTitle = 11
	EnumPresetTitle_PRESET_TITLE_360_VIDEO     EnumPresetTitle = 12
	EnumPresetTitle_PRESET_TITLE_PHOTO_2       EnumPresetTitle = 13
	EnumPresetTitle_PRESET_TITLE_PANORAMA      EnumPresetTitle = 14
	EnumPresetTitle_PRESET_TITLE_360_PHOTO     EnumPresetTitle = 15
	EnumPresetTitle_PRESET_TITLE_TIME_WARP_2   EnumPresetTitle = 16
	EnumPresetTitle_PRESET_TITLE_360_TIME_WARP EnumPresetTitle = 17
	EnumPresetTitle_PRESET_TITLE_CUSTOM        EnumPresetTitle = 18
	EnumPresetTitle_PRESET_TITLE_AIR           EnumPresetTitle = 19
	EnumPresetTitle_PRESET_TITLE_BIKE          EnumPresetTitle = 20
	EnumPresetTitle_PRESET_TITLE_EPIC          EnumPresetTitle = 21
	EnumPresetTitle_PRESET_TITLE_INDOOR        EnumPresetTitle = 22
	EnumPresetTitle_PRESET_TITLE_MOTOR         EnumPresetTitle = 23
	EnumPresetTitle_PRESET_TITLE_MOUNTED       EnumPresetTitle = 24
	EnumPresetTitle_PRESET_TITLE_OUTDOOR       EnumPresetTitle = 25
	EnumPresetTitle_PRESET_TITLE_POV           EnumPresetTitle = 26
	EnumPresetTitle_PRESET_TITLE_SELFIE        EnumPresetTitle = 27
	EnumPresetTitle_PRESET_TITLE_SKATE         EnumPresetTitle = 28
	EnumPresetTitle_PRESET_TITLE_SNOW          EnumPresetTitle = 29
	EnumPresetTitle_PRESET_TITLE_TRAIL         EnumPresetTitle = 30
	EnumPresetTitle_PRESET_TITLE_TRAVEL        EnumPresetTitle = 31
	EnumPresetTitle_PRESET_TITLE_WATER         EnumPresetTitle = 32
	EnumPresetTitle_PRESET_TITLE_LOOPING       EnumPresetTitle = 33
	// Reserved 34 - 50 for custom presets.
	EnumPresetTitle_PRESET_TITLE_360_TIMELAPSE          EnumPresetTitle = 51
	EnumPresetTitle_PRESET_TITLE_360_NIGHT_LAPSE        EnumPresetTitle = 52
	EnumPresetTitle_PRESET_TITLE_360_NIGHT_PHOTO        EnumPresetTitle = 53
	EnumPresetTitle_PRESET_TITLE_PANO_TIME_LAPSE        EnumPresetTitle = 54
	EnumPresetTitle_PRESET_TITLE_MAX_VIDEO              EnumPresetTitle = 55
	EnumPresetTitle_PRESET_TITLE_MAX_PHOTO              EnumPresetTitle = 56
	EnumPresetTitle_PRESET_TITLE_MAX_TIMEWARP           EnumPresetTitle = 57
	EnumPresetTitle_PRESET_TITLE_BASIC                  EnumPresetTitle = 58
	EnumPresetTitle_PRESET_TITLE_ULTRA_SLO_MO           EnumPresetTitle = 59
	EnumPresetTitle_PRESET_TITLE_STANDARD_ENDURANCE     EnumPresetTitle = 60
	EnumPresetTitle_PRESET_TITLE_ACTIVITY_ENDURANCE     EnumPresetTitle = 61
	EnumPresetTitle_PRESET_TITLE_CINEMATIC_ENDURANCE    EnumPresetTitle = 62
	EnumPresetTitle_PRESET_TITLE_SLOMO_ENDURANCE        EnumPresetTitle = 63
	EnumPresetTitle_PRESET_TITLE_STATIONARY_1           EnumPresetTitle = 64
	EnumPresetTitle_PRESET_TITLE_STATIONARY_2           EnumPresetTitle = 65
	EnumPresetTitle_PRESET_TITLE_STATIONARY_3           EnumPresetTitle = 66
	EnumPresetTitle_PRESET_TITLE_STATIONARY_4           EnumPresetTitle = 67
	EnumPresetTitle_PRESET_TITLE_SIMPLE_VIDEO           EnumPresetTitle = 68
	EnumPresetTitle_PRESET_TITLE_SIMPLE_TIME_WARP       EnumPresetTitle = 69
	EnumPresetTitle_PRESET_TITLE_SIMPLE_SUPER_PHOTO     EnumPresetTitle = 70
	EnumPresetTitle_PRESET_TITLE_SIMPLE_NIGHT_PHOTO     EnumPresetTitle = 71
	EnumPresetTitle_PRESET_TITLE_SIMPLE_VIDEO_ENDURANCE EnumPresetTitle = 72
	EnumPresetTitle_PRESET_TITLE_HIGHEST_QUALITY        EnumPresetTitle = 73
	EnumPresetTitle_PRESET_TITLE_EXTENDED_BATTERY       EnumPresetTitle = 74
	EnumPresetTitle_PRESET_TITLE_LONGEST_BATTERY        EnumPresetTitle = 75
	EnumPresetTitle_PRESET_TITLE_STAR_TRAIL             EnumPresetTitle = 76
	EnumPresetTitle_PRESET_TITLE_LIGHT_PAINTING         EnumPresetTitle = 77
	EnumPresetTitle_PRESET_TITLE_LIGHT_TRAIL            EnumPresetTitle = 78
	EnumPresetTitle_PRESET_TITLE_FULL_FRAME             EnumPresetTitle = 79
	EnumPresetTitle_PRESET_TITLE_MAX_LENS_VIDEO         EnumPresetTitle = 80
	EnumPresetTitle_PRESET_TITLE_MAX_LENS_TIMEWARP      EnumPresetTitle = 81
)

// Enum value maps for EnumPresetTitle.
var (
	EnumPresetTitle_name = map[int32]string{
		0:  "PRESET_TITLE_ACTIVITY",
		1:  "PRESET_TITLE_STANDARD",
		2:  "PRESET_TITLE_CINEMATIC",
		3:  "PRESET_TITLE_PHOTO",
		4:  "PRESET_TITLE_LIVE_BURST",
		5:  "PRESET_TITLE_BURST",
		6:  "PRESET_TITLE_NIGHT",
		7:  "PRESET_TITLE_TIME_WARP",
		8:  "PRESET_TITLE_TIME_LAPSE",
		9:  "PRESET_TITLE_NIGHT_LAPSE",
		10: "PRESET_TITLE_VIDEO",
		11: "PRESET_TITLE_SLOMO",
		12: "PRESET_TITLE_360_VIDEO",
		13: "PRESET_TITLE_PHOTO_2",
		14: "PRESET_TITLE_PANORAMA",
		15: "PRESET_TITLE_360_PHOTO",
		16: "PRESET_TITLE_TIME_WARP_2",
		17: "PRESET_TITLE_360_TIME_WARP",
		18: "PRESET_TITLE_CUSTOM",
		19: "PRESET_TITLE_AIR",
		20: "PRESET_TITLE_BIKE",
		21: "PRESET_TITLE_EPIC",
		22: "PRESET_TITLE_INDOOR",
		23: "PRESET_TITLE_MOTOR",
		24: "PRESET_TITLE_MOUNTED",
		25: "PRESET_TITLE_OUTDOOR",
		26: "PRESET_TITLE_POV",
		27: "PRESET_TITLE_SELFIE",
		28: "PRESET_TITLE_SKATE",
		29: "PRESET_TITLE_SNOW",
		30: "PRESET_TITLE_TRAIL",
		31: "PRESET_TITLE_TRAVEL",
		32: "PRESET_TITLE_WATER",
		33: "PRESET_TITLE_LOOPING",
		51: "PRESET_TITLE_360_TIMELAPSE",
		52: "PRESET_TITLE_360_NIGHT_LAPSE",
		53: "PRESET_TITLE_360_NIGHT_PHOTO",
		54: "PRESET_TITLE_PANO_TIME_LAPSE",
		55: "PRESET_TITLE_MAX_VIDEO",
		56: "PRESET_TITLE_MAX_PHOTO",
		57: "PRESET_TITLE_MAX_TIMEWARP",
		58: "PRESET_TITLE_BASIC",
		59: "PRESET_TITLE_ULTRA_SLO_MO",
		60: "PRESET_TITLE_STANDARD_ENDURANCE",
		61: "PRESET_TITLE_ACTIVITY_ENDURANCE",
		62: "PRESET_TITLE_CINEMATIC_ENDURANCE",
		63: "PRESET_TITLE_SLOMO_ENDURANCE",
		64: "PRESET_TITLE_STATIONARY_1",
		65: "PRESET_TITLE_STATIONARY_2",
		66: "PRESET_TITLE_STATIONARY_3",
		67: "PRESET_TITLE_STATIONARY_4",
		68: "PRESET_TITLE_SIMPLE_VIDEO",
		69: "PRESET_TITLE_SIMPLE_TIME_WARP",
		70: "PRESET_TITLE_SIMPLE_SUPER_PHOTO",
		71: "PRESET_TITLE_SIMPLE_NIGHT_PHOTO",
		72: "PRESET_TITLE_SIMPLE_VIDEO_ENDURANCE",
		73: "PRESET_TITLE_HIGHEST_QUALITY",
		74: "PRESET_TITLE_EXTENDED_BATTERY",
		75: "PRESET_TITLE_LONGEST_BATTERY",
		76: "PRESET_TITLE_STAR_TRAIL",
		77: "PRESET_TITLE_LIGHT_PAINTING",
		78: "PRESET_TITLE_LIGHT_TRAIL",
		79: "PRESET_TITLE_FULL_FRAME",
		80: "PRESET_TITLE_MAX_LENS_VIDEO",
		81: "PRESET_TITLE_MAX_LENS_TIMEWARP",
	}
	EnumPresetTitle_value = map[string]int32{
		"PRESET_TITLE_ACTIVITY":               0,
		"PRESET_TITLE_STANDARD":               1,
		"PRESET_TITLE_CINEMATIC":              2,
		"PRESET_TITLE_PHOTO":                  3,
		"PRESET_TITLE_LIVE_BURST":             4,
		"PRESET_TITLE_BURST":                  5,
		"PRESET_TITLE_NIGHT":                  6,
		"PRESET_TITLE_TIME_WARP":              7,
		"PRESET_TITLE_TIME_LAPSE":             8,
		"PRESET_TITLE_NIGHT_LAPSE":            9,
		"PRESET_TITLE_VIDEO":                  10,
		"PRESET_TITLE_SLOMO":                  11,
		"PRESET_TITLE_360_VIDEO":              12,
		"PRESET_TITLE_PHOTO_2":                13,
		"PRESET_TITLE_PANORAMA":               14,
		"PRESET_TITLE_360_PHOTO":              15,
		"PRESET_TITLE_TIME_WARP_2":            16,
		"PRESET_TITLE_360_TIME_WARP":          17,
		"PRESET_TITLE_CUSTOM":                 18,
		"PRESET_TITLE_AIR":                    19,
		"PRESET_TITLE_BIKE":                   20,
		"PRESET_TITLE_EPIC":                   21,
		"PRESET_TITLE_INDOOR":                 22,
		"PRESET_TITLE_MOTOR":                  23,
		"PRESET_TITLE_MOUNTED":                24,
		"PRESET_TITLE_OUTDOOR":                25,
		"PRESET_TITLE_POV":                    26,
		"PRESET_TITLE_SELFIE":                 27,
		"PRESET_TITLE_SKATE":                  28,
		"PRESET_TITLE_SNOW":                   29,
		"PRESET_TITLE_TRAIL":                  30,
		"PRESET_TITLE_TRAVEL":                 31,
		"PRESET_TITLE_WATER":                  32,
		"PRESET_TITLE_LOOPING":                33,
		"PRESET_TITLE_360_TIMELAPSE":          51,
		"PRESET_TITLE_360_NIGHT_LAPSE":        52,
		"PRESET_TITLE_360_NIGHT_PHOTO":        53,
		"PRESET_TITLE_PANO_TIME_LAPSE":        54,
		"PRESET_TITLE_MAX_VIDEO":              55,
		"PRESET_TITLE_MAX_PHOTO":              56,
		"PRESET_TITLE_MAX_TIMEWARP":           57,
		"PRESET_TITLE_BASIC":                  58,
		"PRESET_TITLE_ULTRA_SLO_MO":           59,
		"PRESET_TITLE_STANDARD_ENDURANCE":     60,
		"PRESET_TITLE_ACTIVITY_ENDURANCE":     61,
		"PRESET_TITLE_CINEMATIC_ENDURANCE":    62,
		"PRESET_TITLE_SLOMO_ENDURANCE":        63,
		"PRESET_TITLE_STATIONARY_1":           64,
		"PRESET_TITLE_STATIONARY_2":           65,
		"PRESET_TITLE_STATIONARY_3":           66,
		"PRESET_TITLE_STATIONARY_4":           67,
		"PRESET_TITLE_SIMPLE_VIDEO":           68,
		"PRESET_TITLE_SIMPLE_TIME_WARP":       69,
		"PRESET_TITLE_SIMPLE_SUPER_PHOTO":     70,
		"PRESET_TITLE_SIMPLE_NIGHT_PHOTO":     71,
		"PRESET_TITLE_SIMPLE_VIDEO_ENDURANCE": 72,
		"PRESET_TITLE_HIGHEST_QUALITY":        73,
		"PRESET_TITLE_EXTENDED_BATTERY":       74,
		"PRESET_TITLE_LONGEST_BATTERY":        75,
		"PRESET_TITLE_STAR_TRAIL":             76,
		"PRESET_TITLE_LIGHT_PAINTING":         77,
		"PRESET_TITLE_LIGHT_TRAIL":            78,
		"PRESET_TITLE_FULL_FRAME":             79,
		"PRESET_TITLE_MAX_LENS_VIDEO":         80,
		"PRESET_TITLE_MAX_LENS_TIMEWARP":      81,
	}
)

func (x EnumPresetTitle) Enum() *EnumPresetTitle {
	p := new(EnumPresetTitle)
	*p = x
	return p
}

func (x EnumPresetTitle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumPresetTitle) Descriptor() protoreflect.EnumDescriptor {
	return file_preset_status_proto_enumTypes[4].Descriptor()
}

func (EnumPresetTitle) Type() protoreflect.EnumType {
	return &file_preset_status_proto_enumTypes[4]
}

func (x EnumPresetTitle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnumPresetTitle) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnumPresetTitle(num)
	return nil
}

// Deprecated: Use EnumPresetTitle.Descriptor instead.
func (EnumPresetTitle) EnumDescriptor() ([]byte, []int) {
	return file_preset_status_proto_rawDescGZIP(), []int{4}
}

type NotifyPresetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetGroupArray []*PresetGroup `protobuf:"bytes,1,rep,name=preset_group_array,json=presetGroupArray" json:"preset_group_array,omitempty"` // Array of Preset Groups
}

func (x *NotifyPresetStatus) Reset() {
	*x = NotifyPresetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preset_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPresetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPresetStatus) ProtoMessage() {}

func (x *NotifyPresetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_preset_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPresetStatus.ProtoReflect.Descriptor instead.
func (*NotifyPresetStatus) Descriptor() ([]byte, []int) {
	return file_preset_status_proto_rawDescGZIP(), []int{0}
}

func (x *NotifyPresetStatus) GetPresetGroupArray() []*PresetGroup {
	if x != nil {
		return x.PresetGroupArray
	}
	return nil
}

type Preset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *int32           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                                                          // Preset ID
	Mode         *EnumFlatMode    `protobuf:"varint,2,opt,name=mode,enum=open_gopro.EnumFlatMode" json:"mode,omitempty"`                         // Preset flatmode ID
	TitleId      *EnumPresetTitle `protobuf:"varint,3,opt,name=title_id,json=titleId,enum=open_gopro.EnumPresetTitle" json:"title_id,omitempty"` // Preset Title ID
	TitleNumber  *int32           `protobuf:"varint,4,opt,name=title_number,json=titleNumber" json:"title_number,omitempty"`                     // Preset Title Number (e.g. 1/2/3 in Custom1, Custom2, Custom3)
	UserDefined  *bool            `protobuf:"varint,5,opt,name=user_defined,json=userDefined" json:"user_defined,omitempty"`                     // Is the Preset custom/user-defined?
	Icon         *EnumPresetIcon  `protobuf:"varint,6,opt,name=icon,enum=open_gopro.EnumPresetIcon" json:"icon,omitempty"`                       // Preset Icon ID
	SettingArray []*PresetSetting `protobuf:"bytes,7,rep,name=setting_array,json=settingArray" json:"setting_array,omitempty"`                   // Array of settings associated with this Preset
	IsModified   *bool            `protobuf:"varint,8,opt,name=is_modified,json=isModified" json:"is_modified,omitempty"`                        // Has Preset been modified from factory
	IsFixed      *bool            `protobuf:"varint,9,opt,name=is_fixed,json=isFixed" json:"is_fixed,omitempty"`                                 // Is this Preset mutable?
}

func (x *Preset) Reset() {
	*x = Preset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preset_status_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preset) ProtoMessage() {}

func (x *Preset) ProtoReflect() protoreflect.Message {
	mi := &file_preset_status_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preset.ProtoReflect.Descriptor instead.
func (*Preset) Descriptor() ([]byte, []int) {
	return file_preset_status_proto_rawDescGZIP(), []int{1}
}

func (x *Preset) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Preset) GetMode() EnumFlatMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return EnumFlatMode_FLAT_MODE_UNKNOWN
}

func (x *Preset) GetTitleId() EnumPresetTitle {
	if x != nil && x.TitleId != nil {
		return *x.TitleId
	}
	return EnumPresetTitle_PRESET_TITLE_ACTIVITY
}

func (x *Preset) GetTitleNumber() int32 {
	if x != nil && x.TitleNumber != nil {
		return *x.TitleNumber
	}
	return 0
}

func (x *Preset) GetUserDefined() bool {
	if x != nil && x.UserDefined != nil {
		return *x.UserDefined
	}
	return false
}

func (x *Preset) GetIcon() EnumPresetIcon {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return EnumPresetIcon_PRESET_ICON_VIDEO
}

func (x *Preset) GetSettingArray() []*PresetSetting {
	if x != nil {
		return x.SettingArray
	}
	return nil
}

func (x *Preset) GetIsModified() bool {
	if x != nil && x.IsModified != nil {
		return *x.IsModified
	}
	return false
}

func (x *Preset) GetIsFixed() bool {
	if x != nil && x.IsFixed != nil {
		return *x.IsFixed
	}
	return false
}

type PresetGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *EnumPresetGroup     `protobuf:"varint,1,opt,name=id,enum=open_gopro.EnumPresetGroup" json:"id,omitempty"`           // Preset Group ID
	PresetArray  []*Preset            `protobuf:"bytes,2,rep,name=preset_array,json=presetArray" json:"preset_array,omitempty"`       // Array of Presets contained in this Preset Group
	CanAddPreset *bool                `protobuf:"varint,3,opt,name=can_add_preset,json=canAddPreset" json:"can_add_preset,omitempty"` // Is there room in the group to add additional Presets?
	Icon         *EnumPresetGroupIcon `protobuf:"varint,4,opt,name=icon,enum=open_gopro.EnumPresetGroupIcon" json:"icon,omitempty"`   // The icon to display for this preset group
}

func (x *PresetGroup) Reset() {
	*x = PresetGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preset_status_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresetGroup) ProtoMessage() {}

func (x *PresetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_preset_status_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresetGroup.ProtoReflect.Descriptor instead.
func (*PresetGroup) Descriptor() ([]byte, []int) {
	return file_preset_status_proto_rawDescGZIP(), []int{2}
}

func (x *PresetGroup) GetId() EnumPresetGroup {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return EnumPresetGroup_PRESET_GROUP_ID_VIDEO
}

func (x *PresetGroup) GetPresetArray() []*Preset {
	if x != nil {
		return x.PresetArray
	}
	return nil
}

func (x *PresetGroup) GetCanAddPreset() bool {
	if x != nil && x.CanAddPreset != nil {
		return *x.CanAddPreset
	}
	return false
}

func (x *PresetGroup) GetIcon() EnumPresetGroupIcon {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return EnumPresetGroupIcon_PRESET_GROUP_VIDEO_ICON_ID
}

type PresetSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                                // Setting ID
	Value     *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`                          // Setting value
	IsCaption *bool  `protobuf:"varint,3,opt,name=is_caption,json=isCaption" json:"is_caption,omitempty"` // Does this setting appear on the Preset "pill" in the camera UI?
}

func (x *PresetSetting) Reset() {
	*x = PresetSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preset_status_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresetSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresetSetting) ProtoMessage() {}

func (x *PresetSetting) ProtoReflect() protoreflect.Message {
	mi := &file_preset_status_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresetSetting.ProtoReflect.Descriptor instead.
func (*PresetSetting) Descriptor() ([]byte, []int) {
	return file_preset_status_proto_rawDescGZIP(), []int{3}
}

func (x *PresetSetting) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PresetSetting) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PresetSetting) GetIsCaption() bool {
	if x != nil && x.IsCaption != nil {
		return *x.IsCaption
	}
	return false
}

var File_preset_status_proto protoreflect.FileDescriptor

var file_preset_status_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x22, 0x5b, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xf0,
	0x02, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67,
	0x6f, 0x70, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x22, 0xcc, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63,
	0x61, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x22, 0x54, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0xfa, 0x04, 0x0a, 0x0c, 0x45, 0x6e, 0x75, 0x6d, 0x46,
	0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x11, 0x46, 0x4c, 0x41, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4c, 0x41, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x55, 0x50, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x4c, 0x41,
	0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x50, 0x53,
	0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4c, 0x41,
	0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x0f,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48,
	0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10,
	0x11, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50,
	0x48, 0x4f, 0x54, 0x4f, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15,
	0x46, 0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x5f,
	0x42, 0x55, 0x52, 0x53, 0x54, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x4c, 0x41, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f,
	0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x4c, 0x41, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4c, 0x41, 0x50, 0x53, 0x45,
	0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x15, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x4c, 0x41, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x16, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x4c, 0x41, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x41,
	0x52, 0x50, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4c,
	0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x55, 0x52,
	0x53, 0x54, 0x10, 0x19, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x4d, 0x4f, 0x10, 0x1b, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4c,
	0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x1c, 0x12, 0x1e,
	0x0a, 0x1a, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x10, 0x1d, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x41, 0x49, 0x4e, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x1e, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x49,
	0x4c, 0x10, 0x1f, 0x2a, 0xfd, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x44, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0xe8, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0xe9, 0x07, 0x12,
	0x1e, 0x0a, 0x19, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x10, 0xea, 0x07, 0x12,
	0x24, 0x0a, 0x1f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x49, 0x44, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x45,
	0x4e, 0x53, 0x10, 0xeb, 0x07, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x5f, 0x44,
	0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x45, 0x4e, 0x53, 0x10, 0xec, 0x07, 0x12, 0x28, 0x0a, 0x23, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x45,
	0x4e, 0x53, 0x10, 0xed, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c,
	0x10, 0xee, 0x07, 0x2a, 0xbc, 0x02, 0x0a, 0x13, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x48, 0x4f, 0x54,
	0x4f, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12,
	0x27, 0x0a, 0x23, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x54, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49,
	0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x4e, 0x44, 0x55, 0x52, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x43, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f,
	0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x10, 0x07, 0x2a, 0xa0, 0x0b, 0x0a, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x49, 0x4e, 0x45, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e,
	0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x55, 0x52,
	0x53, 0x54, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49,
	0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x52, 0x53, 0x54, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f,
	0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x57, 0x41, 0x52, 0x50,
	0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f,
	0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x10, 0x08, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x4e, 0x49, 0x47,
	0x48, 0x54, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x49, 0x4c, 0x10, 0x0a,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x32, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x33, 0x36, 0x30, 0x5f, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49,
	0x43, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x5f, 0x32, 0x10, 0x0d, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x4e,
	0x4f, 0x52, 0x41, 0x4d, 0x41, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x52, 0x53, 0x54, 0x5f, 0x32, 0x10, 0x0f,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x57, 0x41, 0x52, 0x50, 0x5f, 0x32, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f, 0x32, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x12, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e,
	0x5f, 0x41, 0x49, 0x52, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x4b, 0x45, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x45, 0x50, 0x49, 0x43,
	0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x4f, 0x4f, 0x52, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x10,
	0x17, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e,
	0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x44, 0x4f, 0x4f,
	0x52, 0x10, 0x19, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43,
	0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x56, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x49, 0x45, 0x10, 0x1b,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f,
	0x53, 0x4b, 0x41, 0x54, 0x45, 0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x53, 0x4e, 0x4f, 0x57, 0x10, 0x1d, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41,
	0x49, 0x4c, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49,
	0x43, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x54, 0x45,
	0x52, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x21, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x37, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f,
	0x10, 0x38, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f,
	0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x57, 0x41, 0x52, 0x50, 0x10, 0x39,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f,
	0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x3a, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x4c, 0x4f,
	0x5f, 0x4d, 0x4f, 0x10, 0x3b, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x4e,
	0x44, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x3c, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x45, 0x4e, 0x44, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x3d, 0x12, 0x23, 0x0a,
	0x1f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x49, 0x4e,
	0x45, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x45, 0x4e, 0x44, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x3e, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f,
	0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x4d, 0x4f, 0x5f, 0x45, 0x4e, 0x44, 0x55, 0x52, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x3f, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x31, 0x10,
	0x40, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x32, 0x10, 0x41, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x33, 0x10, 0x42, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x34, 0x10, 0x43, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f,
	0x54, 0x52, 0x41, 0x49, 0x4c, 0x10, 0x4c, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x41, 0x49,
	0x4e, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x4d, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x49, 0x4c, 0x10, 0x4e, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49,
	0x43, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x4f,
	0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10,
	0xe8, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x43, 0x4f,
	0x4e, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x4f,
	0x54, 0x4f, 0x10, 0xe9, 0x07, 0x2a, 0xf9, 0x0e, 0x0a, 0x0f, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54,
	0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f,
	0x43, 0x49, 0x4e, 0x45, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54,
	0x4f, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x55, 0x52, 0x53, 0x54, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x5f, 0x42, 0x55, 0x52, 0x53, 0x54, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10, 0x06,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x50, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x4c, 0x41, 0x50, 0x53, 0x45, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x0a, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f,
	0x53, 0x4c, 0x4f, 0x4d, 0x4f, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x33, 0x36, 0x30, 0x5f, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x5f, 0x32, 0x10, 0x0d, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41,
	0x4e, 0x4f, 0x52, 0x41, 0x4d, 0x41, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x33, 0x36, 0x30, 0x5f, 0x50, 0x48, 0x4f,
	0x54, 0x4f, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54,
	0x49, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x50, 0x5f, 0x32,
	0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54,
	0x4c, 0x45, 0x5f, 0x33, 0x36, 0x30, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x50,
	0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54,
	0x4c, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x49, 0x52, 0x10,
	0x13, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c,
	0x45, 0x5f, 0x42, 0x49, 0x4b, 0x45, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x50, 0x49, 0x43, 0x10, 0x15, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f,
	0x49, 0x4e, 0x44, 0x4f, 0x4f, 0x52, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x10, 0x17,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x44, 0x4f,
	0x4f, 0x52, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54,
	0x49, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x56, 0x10, 0x1a, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x49,
	0x45, 0x10, 0x1b, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x5f, 0x53, 0x4b, 0x41, 0x54, 0x45, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x4e, 0x4f, 0x57,
	0x10, 0x1d, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54,
	0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45,
	0x4c, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x10, 0x20, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x50,
	0x49, 0x4e, 0x47, 0x10, 0x21, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x33, 0x36, 0x30, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x41,
	0x50, 0x53, 0x45, 0x10, 0x33, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x33, 0x36, 0x30, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x4c, 0x41, 0x50, 0x53, 0x45, 0x10, 0x34, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x33, 0x36, 0x30, 0x5f, 0x4e, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x35, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x4e, 0x4f, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x10, 0x36, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x37, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x48, 0x4f, 0x54,
	0x4f, 0x10, 0x38, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x57, 0x41, 0x52, 0x50,
	0x10, 0x39, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54,
	0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x3a, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41,
	0x5f, 0x53, 0x4c, 0x4f, 0x5f, 0x4d, 0x4f, 0x10, 0x3b, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x3c, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x55, 0x52, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x3d, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x5f, 0x43, 0x49, 0x4e, 0x45, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x45, 0x4e,
	0x44, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x3e, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x4d, 0x4f, 0x5f,
	0x45, 0x4e, 0x44, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x3f, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x31, 0x10, 0x40, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x32, 0x10, 0x41, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x33, 0x10, 0x42, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x52, 0x59, 0x5f, 0x34, 0x10, 0x43, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x10, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x50, 0x10, 0x45, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45,
	0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x46, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53,
	0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x48, 0x4f, 0x54,
	0x4f, 0x10, 0x47, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x45, 0x4e, 0x44, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x48, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x45, 0x53, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x49, 0x12, 0x21,
	0x0a, 0x1d, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10,
	0x4a, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c,
	0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x10, 0x4b, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x10, 0x4c,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x41, 0x49, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x4d, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c,
	0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x10, 0x4e, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x4f, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x4c, 0x45, 0x4e, 0x53, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x50, 0x12, 0x22, 0x0a,
	0x1e, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x57, 0x41, 0x52, 0x50, 0x10,
	0x51, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x75, 0x61, 0x70, 0x61, 0x70, 0x61, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
}

var (
	file_preset_status_proto_rawDescOnce sync.Once
	file_preset_status_proto_rawDescData = file_preset_status_proto_rawDesc
)

func file_preset_status_proto_rawDescGZIP() []byte {
	file_preset_status_proto_rawDescOnce.Do(func() {
		file_preset_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_preset_status_proto_rawDescData)
	})
	return file_preset_status_proto_rawDescData
}

var file_preset_status_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_preset_status_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_preset_status_proto_goTypes = []interface{}{
	(EnumFlatMode)(0),          // 0: open_gopro.EnumFlatMode
	(EnumPresetGroup)(0),       // 1: open_gopro.EnumPresetGroup
	(EnumPresetGroupIcon)(0),   // 2: open_gopro.EnumPresetGroupIcon
	(EnumPresetIcon)(0),        // 3: open_gopro.EnumPresetIcon
	(EnumPresetTitle)(0),       // 4: open_gopro.EnumPresetTitle
	(*NotifyPresetStatus)(nil), // 5: open_gopro.NotifyPresetStatus
	(*Preset)(nil),             // 6: open_gopro.Preset
	(*PresetGroup)(nil),        // 7: open_gopro.PresetGroup
	(*PresetSetting)(nil),      // 8: open_gopro.PresetSetting
}
var file_preset_status_proto_depIdxs = []int32{
	7, // 0: open_gopro.NotifyPresetStatus.preset_group_array:type_name -> open_gopro.PresetGroup
	0, // 1: open_gopro.Preset.mode:type_name -> open_gopro.EnumFlatMode
	4, // 2: open_gopro.Preset.title_id:type_name -> open_gopro.EnumPresetTitle
	3, // 3: open_gopro.Preset.icon:type_name -> open_gopro.EnumPresetIcon
	8, // 4: open_gopro.Preset.setting_array:type_name -> open_gopro.PresetSetting
	1, // 5: open_gopro.PresetGroup.id:type_name -> open_gopro.EnumPresetGroup
	6, // 6: open_gopro.PresetGroup.preset_array:type_name -> open_gopro.Preset
	2, // 7: open_gopro.PresetGroup.icon:type_name -> open_gopro.EnumPresetGroupIcon
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_preset_status_proto_init() }
func file_preset_status_proto_init() {
	if File_preset_status_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_preset_status_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyPresetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preset_status_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preset_status_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresetGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preset_status_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresetSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_preset_status_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_preset_status_proto_goTypes,
		DependencyIndexes: file_preset_status_proto_depIdxs,
		EnumInfos:         file_preset_status_proto_enumTypes,
		MessageInfos:      file_preset_status_proto_msgTypes,
	}.Build()
	File_preset_status_proto = out.File
	file_preset_status_proto_rawDesc = nil
	file_preset_status_proto_goTypes = nil
	file_preset_status_proto_depIdxs = nil
}
